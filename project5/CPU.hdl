// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Register A
    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=aluoutToA, sel=instruction[15], out=aIn);
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=loadA);
    ARegister(in=aIn, load=loadA, out=aToAluMux, out[0..14]=addressM, out=aToPC);

    //Mux into ALU
    Mux16(a=aToAluMux, b=inM, sel=instruction[12], out=aluIn2);
    
    // Register D
    DRegister(in=aluoutToD, load=loadd, out=aluIn1);
    And(a=instruction[4], b=instruction[15], out=loadd);
    
    ALU(x=aluIn1, y=aluIn2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=isZero, ng=isNeg, out=aluoutToD, out=aluoutToA,out=outM);

    // PC
    PC(in=aToPC, reset=reset, load=doJump, inc=true, out[0..14]=pc);

    And(a=isNeg, b=instruction[2], out=dj1);
    And(a=isZero, b=instruction[1], out=dj2);
    Not(in=isNeg, out=isNotNeg);
    Not(in=isZero, out=isNotZero);
    And(a=isNotNeg, b=isNotZero, out=isPos);
    And(a=isPos, b=instruction[0], out=dj3);
    Or(a=dj1, b=dj2, out=dj12);
    Or(a=dj12, b=dj3, out=dj123);
    And(a=dj123, b=instruction[15], out=doJump);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
}
